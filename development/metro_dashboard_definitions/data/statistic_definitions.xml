<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <data noupdate="1">

        <!--
            Odoo Usage KPI's
        -->

        <!-- Number of Odoo Users -->
        <record id="metro_usage_num_users" model="metro.dashboard.statistics">
            <field name="name">Number of Users</field>
            <field name="visualisation">number</field>
            <field name="suffix">users</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">0</field>
            <field name="cust_timeframe">General</field>
            <field name="compute_code">result = env["res.partner"].search_count([("active", "=", True)])</field>
        </record>

        <!-- Number of installed Apps -->
        <record id="metro_usage_num_apps" model="metro.dashboard.statistics">
            <field name="name">Number of installed Apps</field>
            <field name="visualisation">number</field>
            <field name="suffix">apps</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">0</field>
            <field name="cust_timeframe">General</field>
            <field name="compute_code">result = env["ir.module.module"].search_count([
    ("state", "=", "installed"),
    ("application", "=", True),
])</field>
        </record>

        <!-- Number of Customers -->
        <record id="metro_usage_num_customers" model="metro.dashboard.statistics">
                <field name="name">Number of Customers</field>
                <field name="visualisation">number</field>
                <field name="suffix">customers</field>
                <field name="data_source">python</field>
                <field name="use_timeframes">0</field>
                <field name="cust_timeframe">General</field>
            <field name="compute_code">result = env["res.partner"].search_count([
    ("customer", "=", True),
    ("active", "=", True),
])</field>
        </record>

        <!-- Number of active Suppliers -->
        <record id="metro_usage_suppliers_count" model="metro.dashboard.statistics">
            <field name="name">Number of Suppliers</field>
            <field name="visualisation">number</field>
            <field name="suffix">suppliers</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">0</field>
            <field name="cust_timeframe">General</field>
            <field name="compute_code">result = env["res.partner"].search_count([
    ("supplier", "=", True),
    ("active", "=", True)
])</field>
        </record>

        <!-- Active Products -->
        <record id="metro_usage_active_products_count" model="metro.dashboard.statistics">
            <field name="name">Active Products</field>
            <field name="visualisation">number</field>
            <field name="suffix">products</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">0</field>
            <field name="cust_timeframe">General</field>
            <field name="dependencies">metro_studio_customizations</field>
            <field name="compute_code">today = datetime.now().date()
result = env["product.template"].search_count([
    ("active", "=", True),
    ("sale_ok", "=", True),
    ("x_launch_date", "&lt;=", today),
])</field>
        </record>

        <!--
            Category Management
        -->

        <!-- Products without Sales -->
        <record id="metro_cat_man_unsold" model="metro.dashboard.statistics">
            <field name="name">Products without Sales</field>
            <field name="visualisation">number</field>
            <field name="suffix">products</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">1</field>
            <field name="dependencies">sale,metro_studio_customizations</field>
            <field name="compute_code">query = """SELECT COUNT(pt.*),json_agg(pt.name) FROM product_template AS pt
WHERE pt.id NOT IN (
    SELECT pp.product_tmpl_id FROM sale_order_line AS sol
    JOIN sale_order AS so ON sol.order_id=so.id
    JOIN product_product AS pp ON sol.product_id=pp.id
    WHERE so.date_order &lt;= '"""+ str(last_day) +"""'
    AND so.date_order &gt;= '"""+ str(first_day) +"""'
    AND so.state NOT IN ('draft', 'cancel')
    GROUP BY pp.product_tmpl_id
) AND pt.sale_ok='t' AND pt.active='t' AND pt.x_launch_date &lt;= NOW();
"""
env.cr.execute(query)
res = env.cr.fetchone()
result = 0.0
if res:
    result = res[0] or ""
    tdata = res[1] or {}
    table = []
    for item in tdata:
        table_item = {
            "label": item,
            "value": 0,
            "suffix": "sales"
        }
        table.append(table_item)</field>
        </record>

        <!-- Sales per Territory Sales Executive -->
        <record id="metro_cat_man_sales_tse" model="metro.dashboard.statistics">
            <field name="name">Sales per TSE</field>
            <field name="visualisation">bar</field>
            <field name="monetary">1</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">1</field>
            <field name="dependencies">sale,metro_min_amount_so</field>
            <field name="compute_code">query = """SELECT json_object_agg(
    TRIM(BOTH FROM d.name), CAST(d.amount as FLOAT)
) FROM (
    SELECT 
        tse.amount,
        CASE WHEN rp.name IS NULL THEN 'Unknown' ELSE rp.name END
    FROM (
        SELECT SUM(so.amount_untaxed) amount,so.user_id FROM sale_order AS so
        JOIN res_partner AS customer ON so.partner_id=customer.id
        WHERE (customer.kac='f' OR customer.kac IS NULL)
        AND so.state NOT IN ('draft', 'cancel')
        AND so.date_order &gt;= '"""+str(first_day)+"""'
        AND so.date_order &lt;= '"""+str(last_day)+"""'
        GROUP BY so.user_id
    ) AS tse
    LEFT JOIN res_users AS ru ON tse.user_id=ru.id
    LEFT JOIN res_partner AS rp ON ru.partner_id=rp.id
    ORDER BY tse.amount desc
) AS d;"""
env.cr.execute(query)
result = env.cr.fetchone()[0]
if not result:
    result = {}</field>
        </record>

        <!-- Margin per Territory Sales Executive -->
        <record id="metro_cat_man_margin_tse" model="metro.dashboard.statistics">
            <field name="name">Margin per TSE</field>
            <field name="visualisation">bar</field>
            <field name="monetary">1</field>
            <field name="use_timeframes">1</field>
            <field name="data_source">python</field>
            <field name="dependencies">sale,metro_min_amount_so,metro_product_margin</field>
            <field name="compute_code">query = """SELECT json_object_agg(
    TRIM(BOTH FROM d.name), CAST(d.margin as FLOAT)
) FROM (
    SELECT 
        tse.margin,
        CASE WHEN rp.name IS NULL THEN 'Unknown' ELSE rp.name END
    FROM (
        SELECT SUM(so.margin) margin,so.user_id FROM sale_order AS so
        JOIN res_partner AS customer ON so.partner_id=customer.id
        WHERE (customer.kac='f' OR customer.kac IS NULL)
        AND so.state NOT IN ('draft', 'cancel')
        AND so.date_order &gt;= '"""+str(first_day)+"""'
        AND so.date_order &lt;= '"""+str(last_day)+"""'
        GROUP BY so.user_id
    ) AS tse
    LEFT JOIN res_users AS ru ON tse.user_id=ru.id
    LEFT JOIN res_partner AS rp ON ru.partner_id=rp.id
    ORDER BY tse.margin desc
) AS d;"""
env.cr.execute(query)
result = env.cr.fetchone()[0]
if not result:
    result = {}</field>
        </record>

        <record id="metro_cat_man_out_of_stock" model="metro.dashboard.statistics">
            <field name="name">Out of Stock</field>
            <field name="visualisation">pie</field>
            <field name="suffix">products</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">0</field>
            <field name="cust_timeframe">General</field>
            <field name="dependencies">stock</field>
            <field name="compute_code">all_products = env["product.product"].search_count([
    ("active", "=", True),
    ("sale_ok", "=", True)
])
buy_id = env["stock.location.route"].search([
    ("name", "ilike", "buy")
], limit=1).id
out_of_stock = env["product.product"].search([
    ("active", "=", True),
    ("sale_ok", "=", True),
    ("virtual_available", "&lt;=", 0),
    ("route_ids", "in", buy_id),
])
result = {
    "Enough items in Stock": all_products - len(out_of_stock),
    "Out of Stock": len(out_of_stock)
}
table = []
for o in out_of_stock:
    d = {
        "label": o.name,
        "value": o.virtual_available,
        "suffix": "left"
    }
    table.append(d)</field>
        </record>

        <!--
            Web Shop
        -->

        <!-- Share of Web Shop Sales per Key Account Manager -->
        <record id="metro_webshop_share_of_sales_per_kam" model="metro.dashboard.statistics">
            <field name="name">Share of Web Shop Sales per KAM</field>
            <field name="visualisation">bar</field>
            <field name="suffix">%</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">1</field>
            <field name="dependencies">sale,metro_min_amount_so</field>
            <field name="compute_code">query = """SELECT json_object_agg(b.name, b.value) FROM (
    SELECT 
        CASE 
            WHEN a.total=0
            THEN 0
            ELSE a.webshop / a.total * 100
        END AS value,
        rp.name
    FROM (
        SELECT
            SUM(orders.amount_untaxed) total,
            SUM(
                CASE WHEN orders.create_uid=1
                THEN orders.amount_untaxed
                ELSE 0 END
            ) webshop,
            orders.user_id
        FROM (
            SELECT so.amount_untaxed,so.user_id,so.create_uid FROM sale_order AS so
            JOIN res_partner AS rp ON so.partner_id=rp.id
            WHERE rp.kac='t' AND so.state IN ('sale', 'done')
            AND so.date_order&gt;='"""+str(first_day)+"""'
            AND so.date_order&lt;='"""+str(last_day)+"""'
        ) AS orders
        GROUP BY orders.user_id
    ) AS a
    JOIN res_users AS ru ON a.user_id=ru.id
    JOIN res_partner AS rp ON ru.partner_id=rp.id
) AS b
WHERE b.value &gt; 0;"""
env.cr.execute(query)
result = env.cr.fetchone()[0]
if not result:
    result = {}</field>
        </record>

        <!-- Favorite Products from Wishlist -->
        <record id="metro_webshop_fav_products" model="metro.dashboard.statistics">
            <field name="name">Favorite Products from Wishlist</field>
            <field name="visualisation">pie</field>
            <field name="suffix">times added</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">0</field>
            <field name="cust_timeframe">Last 13 weeks</field>
            <field name="dependencies">website_sale_wishlist</field>
            <field name="compute_code">today = datetime.now().date() + timedelta(days=1)
first_day = datetime.now().date() - timedelta(weeks=13)
records = env["product.wishlist"].search([
    ("create_date", "&gt;=", first_day),
    ("create_date", "&lt;=", today)
])
fav_products = {}
result = {}
keys = []
for record in records:
    if not record.product_id.id in fav_products:
        fav_products[record.product_id.id] = 0
    fav_products[record.product_id.id] += 1
sort = sorted(fav_products, key=fav_products.get, reverse=True)[:5]
for k in sort:
    product = env["product.product"].browse([k])
    result[product.name.strip()] = fav_products[k]
    keys.append(product.name)</field>
        </record>

        <record id="metro_webshop_availability" model="metro.dashboard.statistics">
            <field name="name">Web Shop Availability</field>
            <field name="visualisation">pie</field>
            <field name="suffix">products</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">0</field>
            <field name="cust_timeframe">General</field>
            <field name="dependencies">stock,website_sale</field>
            <field name="compute_code">all_products = env["product.template"].search([
    ("active", "=", True),
    ("sale_ok", "=", True),
    ("website_published", "=", True)
])
buy_id = env["stock.location.route"].search([
    ("name", "ilike", "buy")
], limit=1).id
out_of_stock = env["product.template"].search([
    ("active", "=", True),
    ("sale_ok", "=", True),
    ("virtual_available", "&lt;=", 0),
    ("website_published", "=", True),
    ("route_ids", "in", buy_id),
    ("inventory_availability", "!=", "never"),
])
always_in_stock = env["product.template"].search([
    ("active", "=", True),
    ("sale_ok", "=", True),
    ("website_published", "=", True),
    ("inventory_availability", "=", "never"),
])
result = {
    "In Stock": len(all_products) - len(out_of_stock) - len(always_in_stock),
    "Out of Stock": len(out_of_stock),
    "Always show in Stock": len(always_in_stock)
}
table = []
for o in out_of_stock:
    d = {
        "label": o.name,
        "value": o.virtual_available,
        "suffix": "left"
    }
    table.append(d)</field>
        </record>

        <!--
            SCM - Supply Chain Management
        -->

        <!-- Shrinkage absolute value -->
        <record id="metro_scm_shrinkage" model="metro.dashboard.statistics">
            <field name="name">Absolute Shrinkage</field>
            <field name="visualisation">bar</field>
            <field name="suffix">items</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">1</field>
            <field name="dependencies">stock</field>
            <field name="compute_code">scrapped = env["stock.scrap"].search([
    ("state", "=", "done"),
    ("write_date", "&gt;=", first_day),
    ("write_date", "&lt;=", last_day),
])
result = {}
for product in scrapped:
    if not product.product_uom_id.name in result:
        result[product.product_uom_id.name] = 0
    result[product.product_uom_id.name] += product.scrap_qty</field>
        </record>

        <record id="metro_scm_qc_fail_pass" model="metro.dashboard.statistics">
            <field name="name">Failed/Passed QCs</field>
            <field name="visualisation">pie</field>
            <field name="suffix">items</field>
            <field name="use_timeframes">1</field>
            <field name="data_source">python</field>
            <field name="dependencies">quality,quality_control</field>
            <field name="compute_code">query = """SELECT json_object_agg(a.state, a.COUNT) FROM (
    SELECT
        COUNT(*),
        CASE
            WHEN qc.quality_state='fail' THEN 'Failed'
            WHEN qc.quality_state='pass' THEN 'Passed'
            ELSE 'Not checked'
        END AS state
    FROM quality_check AS qc
    WHERE control_date &gt;= '"""+str(first_day)+"""'
    AND control_date &lt;= '"""+str(last_day)+"""'
    GROUP BY qc.quality_state
) AS a;"""
env.cr.execute(query)
result = env.cr.fetchone()[0]
if not result:
    result = {}</field>
        </record>

        <record id="metro_scm_failed_qcs" model="metro.dashboard.statistics">
            <field name="name">Failed QCs</field>
            <field name="visualisation">pie</field>
            <field name="suffix">items</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">1</field>
            <field name="dependencies">quality,quality_control</field>
            <field name="compute_code">query = """SELECT
    COUNT(CASE
        WHEN b.total = 0 THEN 1
        ELSE NULL
    END) no_alert,
    COUNT(CASE
        WHEN b.solved &gt; 0 AND b.solved &lt; b.total THEN 1
        ELSE NULL
    END) partly_solved_alert,
    COUNT(CASE
        WHEN b.solved = b.total AND b.total &gt; 0 THEN 1
        ELSE NULL
    END) solved_alert,
    COUNT(CASE
        WHEN b.total &gt; 0 AND b.solved = 0 THEN 1
        ELSE NULL
    END) unsolved_alert
FROM (
    SELECT 
        a.name,
        COUNT(qa.*) total,
        COUNT(CASE
            WHEN qa.stage_id IN (
                SELECT qas.id FROM quality_alert_stage AS qas
                WHERE qas.done='t'
            ) THEN 1
            ELSE NULL
        END) solved
    FROM (
        SELECT qc.id,qc.name FROM quality_check AS qc
        WHERE qc.control_date &gt;= '"""+str(first_day)+"""'
        AND qc.control_date &lt;= '"""+str(last_day)+"""'
        AND qc.quality_state = 'fail'
    ) AS a
    LEFT JOIN quality_alert AS qa ON a.id=qa.check_id
    GROUP BY a.name
) AS b;"""
env.cr.execute(query)
res = env.cr.fetchone()
result = {}
if res:
    result = {
        "Failed without Alert": res[0],
        "Failed with unsolved Alert": res[3],
        "Failed with partly solved Alert": res[1],
        "Failed with solved Alert": res[2]
    }</field>
        </record>

        <record id="metro_scm_solved_tickets" model="metro.dashboard.statistics">
            <field name="name">Solved Tickets</field>
            <field name="visualisation">number</field>
            <field name="suffix">tickets</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">1</field>
            <field name="dependencies">helpdesk</field>
            <field name="compute_code">solved_stages = env["helpdesk.stage"].search([
    ("name", "ilike", "solve"),
    ("is_close", "=", True),
])
solved_ids = [stage.id for stage in solved_stages]
result = env["helpdesk.ticket"].search_count([
    ("stage_id", "in", solved_ids),
    ("close_date", "&gt;=", first_day),
    ("close_date", "&lt;=", last_day),
])</field>
        </record>

        <!--
            VAS
        -->

        <!-- Average production times (of the current month and the last half year) -->
        <record id="metro_vas_avg_times" model="metro.dashboard.statistics">
            <field name="name">Average production time</field>
            <field name="visualisation">line</field>
            <field name="suffix">seconds</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">0</field>
            <field name="cust_timeframe">See x Axis</field>
            <field name="dependencies">mrp</field>
            <field name="compute_code">first_day = datetime.now().date().replace(day=1)
last_day = first_day
if first_day.month + 1 &gt; 12:
    last_day = first_day.replace(month=1, year=first_day.year+1)
else:
    last_day = first_day.replace(month=first_day.month+1)
result = {}
for i in range(0, 7):
    mos = env["mrp.production"].search([
        ("state", "=", "done"),
        ("date_finished", "&gt;=", first_day),
        ("date_finished", "&lt;=", last_day),
    ])
    total_delta = timedelta(seconds=0)
    for mo in mos:
        if mo.date_finished and mo.date_start:
            total_delta += mo.date_finished - mo.date_start
    if len(mos):
        month = first_day.strftime("%B %Y")
        result[month] = (total_delta.seconds / len(mos))
    last_day = (first_day - timedelta(days=1))
    first_day = last_day.replace(day=1)
keys = sorted(result.keys(), key=lambda m: datetime.strptime(m, "%B %Y"))</field>
        </record>

        <!-- Produced Products -->
        <record id="metro_vas_produced_products" model="metro.dashboard.statistics">
            <field name="name">Produced Products</field>
            <field name="visualisation">number</field>
            <field name="suffix">products</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">1</field>
            <field name="dependencies">mrp</field>
            <field name="compute_code">query = """SELECT json_object_agg(b.name, b.SUM) FROM (
    SELECT SUM(a.value),a.name FROM (
        SELECT
            mrp.product_qty*pt.list_price as value,
            pt.name,
            pt.id
        FROM mrp_production AS mrp
        JOIN product_product AS pp ON mrp.product_id=pp.id
        JOIN product_template AS pt ON pp.product_tmpl_id=pt.id
        WHERE mrp.state = 'done'
        AND mrp.date_finished &gt;= '"""+str(first_day)+"""'
        AND mrp.date_finished &lt;= '"""+str(last_day)+"""'
    ) AS a
    GROUP BY a.name
    ORDER BY SUM DESC
) AS b;"""
currency = env.user.company_id.currency_id.symbol or "?"
env.cr.execute(query)
res = env.cr.fetchone()[0]
result = 0
table = []
if res:
    result = len(res)
    table = []
    i = 0
    for key,value in res.items():
        l = {
            "label": key,
            "value": value,
            "suffix": currency,
            "sequence": i
        }
        table.append(l)
        i += 1</field>
        </record>

        <!-- Produced number of Units -->
        <record id="metro_vas_produced_units" model="metro.dashboard.statistics">
            <field name="name">Produced number of Units</field>
            <field name="visualisation">pie</field>
            <field name="data_source">python</field>
            <field name="suffix">produced</field>
            <field name="use_timeframes">1</field>
            <field name="dependencies">mrp</field>
            <field name="compute_code">produced = {}
id_name = {}
result = {}
manufact_order = env["mrp.production"].search([
    ("state", "=", "done"),
    ("date_finished", "&gt;=", first_day),
    ("date_finished", "&lt;=", last_day),
])
for mo in manufact_order:
    if not mo.product_uom_id.id in produced:
        produced[mo.product_uom_id.id] = 0
        id_name[mo.product_uom_id.id] = mo.product_uom_id.name
    produced[mo.product_uom_id.id] += mo.qty_produced
for k, v in produced.items():
    name = id_name[k]
    result[name] = v</field>
        </record>

        <!-- Shrinkage Share -->
        <record id="metro_vas_shrinkage_share" model="metro.dashboard.statistics">
            <field name="name">Shrinkage Share</field>
            <field name="visualisation">number</field>
            <field name="suffix">%</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">1</field>
            <field name="dependencies">stock</field>
            <field name="compute_code">scrapped = env["stock.scrap"].search([
    ("state", "=", "done"),
    ("write_date", "&gt;=", first_day),
    ("write_date", "&lt;=", last_day),
])
products = {}
result = 0
table = []
for product in scrapped:
    p = env["product.product"].browse([product.product_id.id])
    if not p.id in products:
        l = {
            "label": p.name,
            "value": 0,
            "suffix": "%",
            "count": 0
        }
        products[p.id] = l
    val = 0
    if p.qty_available &gt; 0:
        val = product.scrap_qty / (p.qty_available + product.scrap_qty) * 100
    else:
        val = 100
    products[p.id]["count"] += 1
    products[p.id]["value"] = (val + products[p.id]["value"]) / products[p.id]["count"]
    result += val
if len(scrapped):
    result = result / len(scrapped)
    sort = sorted(products, key=lambda k: products[k]["value"], reverse=True)
    for key in sort:
        p = products[key]
        tl = {
            "label": p["label"],
            "value": p["value"],
            "suffix": p["suffix"]
        }
        table.append(tl)</field>
        </record>

        <!--
            Finance and Controlling
        -->

        <!-- Bad Depts: Customers -->
        <record id="metro_fnc_bad_debts_customers" model="metro.dashboard.statistics">
            <field name="name">Customers Bad Debts</field>
            <field name="monetary">1</field>
            <field name="visualisation">number</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">0</field>
            <field name="cust_timeframe">General</field>
            <field name="dependencies">account</field>
            <field name="compute_code">data = variable.search([("name", "=", "bad_debts")], limit=1).value
currency = env.user.company_id.currency_id.symbol or "?"
result = 0
if data:
    data = load(data)
    result = data["receivable_total"]
    table = []
    sorted_data = sorted(data["receivable"], key=lambda d: d["total"] * -1)
    i = 0
    for rec in sorted_data[:7]:
        row = {
            "label": rec["name"] or "Unknown",
            "value": rec["total"] or 0.0,
            "suffix": currency,
            "sequence": i
        }
        i += 1
        table.append(row)
    if len(data["receivable"]) > 7:
        table.append({
            "label": "More items:",
            "value": len(data["receivable"]) - 7,
            "suffix": "",
            "sequence": 10
        })</field>
        </record>

        <!-- Bad Depts: Vendors -->
        <record id="metro_fnc_bad_debts_vendors" model="metro.dashboard.statistics">
            <field name="name">Vendors Bad Debts</field>
            <field name="monetary">1</field>
            <field name="visualisation">number</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">0</field>
            <field name="cust_timeframe">General</field>
            <field name="dependencies">account</field>
            <field name="compute_code">data = variable.search([("name", "=", "bad_debts")], limit=1).value
currency = env.user.company_id.currency_id.symbol or "?"
result = 0
if data:
    data = load(data)
    result = data["payable_total"]
    table = []
    sorted_data = sorted(data["payable"], key=lambda d: d["total"])
    i = 0
    for rec in sorted_data[:7]:
        row = {
            "label": rec["name"] or "Unknown",
            "value": rec["total"] or 0.0,
            "suffix": currency,
            "sequence": i
        }
        i += 1
        table.append(row)
    if len(sorted_data) > 7:
        table.append({
            "label": "More items:",
            "value": len(sorted_data) - 7,
            "suffix": "",
            "sequence": 10
        })</field>                
        </record>

        <!-- Bad Debts Overview -->
        <record id="metro_fnc_bad_debts_overview" model="metro.dashboard.statistics">
            <field name="name">Bad Debts Overview</field>
            <field name="monetary">1</field>
            <field name="visualisation">line</field>
            <field name="data_source">python</field>
            <field name="use_timeframes">0</field>
            <field name="cust_timeframe">General</field>
            <field name="dependencies">account</field>
            <field name="compute_code">def preventNegative(val):
    if val &lt; 0:
        return (val * -1)
    return val
data = variable.search([("name", "=", "bad_debts")], limit=1).value
keys = ""
if data:
    data = load(data)
    debts = data["payable"]
    receivables = data["receivable"]
    tmpl = {
        "1-30": 0.0,
        "31-60": 0.0,
        "61-90": 0.0,
        "91-120": 0.0,
        "Older": 0.0,
    }
    keys = sorted(tmpl)
    customers = tmpl.copy()
    vendors = tmpl.copy()
    for debt in debts:
        vendors["Older"] += preventNegative(debt["0"])
        vendors["91-120"] += preventNegative(debt["1"])
        vendors["61-90"] += preventNegative(debt["2"])
        vendors["31-60"] += preventNegative(debt["3"])
        vendors["1-30"] += preventNegative(debt["4"])
    for receivable in receivables:
        customers["Older"] += preventNegative(receivable["0"])
        customers["91-120"] += preventNegative(receivable["1"])
        customers["61-90"] += preventNegative(receivable["2"])
        customers["31-60"] += preventNegative(receivable["3"])
        customers["1-30"] += preventNegative(receivable["4"])
    result = [
        "Customers", customers,
        "Vendors", vendors
    ]
else:
    result = []</field>
        </record>
    </data>
</odoo>
