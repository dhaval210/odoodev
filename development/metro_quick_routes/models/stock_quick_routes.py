from odoo import api, fields, models, _
from odoo.exceptions import ValidationError


class QuickRoutes(models.Model):
    _name = 'stock.quick.routes'
    _description = 'Module to create simple routes'

    warehouse_id = fields.Many2one(comodel_name='stock.warehouse')
    name = fields.Char()
    input_location_id = fields.Many2one(comodel_name='stock.location')

    @api.depends('name')
    def _compute_names(self):
        if self.name:
            self.quality_name = 'Quality Control ' + self.name
            self.puffer_name = 'Puffer Zone ' + self.name

    # select quality location or use autogenerated name
    # quality_location_id = fields.Many2one(comodel_name='stock.location')
    quality_name = fields.Char(compute="_compute_names")
    # select puffer location or use autogenerated name
    # puffer_location_id = fields.Many2one(comodel_name='stock.location')
    puffer_name = fields.Char(compute="_compute_names")
    location_parent_create = fields.Many2one(comodel_name='stock.location')
    final_location_id = fields.Many2one(comodel_name='stock.location')
    sequence_in_id = fields.Many2one(comodel_name='ir.sequence')
    sequence_int_id = fields.Many2one(comodel_name='ir.sequence')

    applicable_category = fields.Boolean()
    category_ids = fields.Many2many(comodel_name='product.category')
    applicable_warehouse = fields.Boolean()
    warehouse_ids = fields.Many2many(comodel_name='stock.warehouse')
    applicable_product = fields.Boolean()
    applicable_saleorderline = fields.Boolean()
    route_generated = fields.Boolean(default=False, copy=False)
    active = fields.Boolean(default=True)

    def generate_quality_route(self):
        if not self.route_generated:
            route_values = {
                'name': self.warehouse_id.name + ' Receive ' + self.name,
                'sequence': 10,
                'product_categ_selectable': self.applicable_category,
                'warehouse_selectable': self.applicable_warehouse,
                'product_selectable': self.applicable_product,
                'sale_selectable': self.applicable_saleorderline,
                'rule_ids': self.create_rules(),
            }
            if self.applicable_warehouse and len(self.warehouse_ids.ids):
                route_values.update({
                    'warehouse_ids': [(6, 0, self.warehouse_ids.ids)]
                })

            route = self.env['stock.location.route'].create(route_values)
            if (
                self.applicable_category and
                len(self.category_ids) and
                route.id
            ):
                categories = self.category_ids.filtered(
                    lambda r: route.id not in r.route_ids.ids
                )
                categories.write({'route_ids': [(4, route.id)]})
            self.route_generated = True
            return True
        else:
            return ValidationError(_('route already generated'))

    def create_rules(self):
        receipt_name = self.warehouse_id.name + ': ' + self.name
        quality_name = self.quality_name
        quality_name_in = self.quality_name + ' IN'
        quality_name_out = self.quality_name + ' OUT'
        puffer_name = self.puffer_name
        in_stock_name = 'In Stock ' + self.name

        # create locations
        quality_in_location = self.create_location(quality_name_in)
        quality_out_location = self.create_location(quality_name_out)
        # puffer_location = self.create_location(puffer_name)

        # add warehouse name for operation types
        quality_name_in = self.warehouse_id.name + ': ' + quality_name_in
        quality_name_out = self.warehouse_id.name + ': ' + quality_name_out
        puffer_name = self.warehouse_id.name + ': ' + puffer_name

        # create rule for input => quali
        rule_receipt_values = {
            'name': receipt_name,
            'action': 'pull_push',
            'picking_type_id': self.create_picking_type(
                'Input MH Quality IN ' + self.name,
                'incoming',
                True,
                self.input_location_id.id,
                quality_in_location.id,
                self.sequence_in_id.id,
            ),
            'location_src_id': self.input_location_id.id,
            'location_id': quality_in_location.id,
            'procure_method': 'make_to_order',
            'warehouse_id': self.warehouse_id.id,
            'sequence': 10,
        }
        # create rule for quali => quali
        rule_quality_values = {
            'name': quality_name_in,
            'action': 'pull_push',
            'picking_type_id': self.create_picking_type(
                'Quality IN MH Quality OUT ' + self.name,
                'internal',
                False,
                quality_in_location.id,
                quality_out_location.id,
                self.sequence_int_id.id,
            ),
            'location_src_id': quality_in_location.id,
            'location_id': quality_out_location.id,
            'procure_method': 'make_to_order',
            'warehouse_id': self.warehouse_id.id,
            'sequence': 20,
        }
        # create rule for quali => puffer (taxi)
        rule_puffer_values = {
            'name': puffer_name,
            'action': 'pull_push',
            'picking_type_id': self.create_picking_type(
                'Quality OUT MH Stock IN ' + self.name,
                'internal',
                False,
                quality_out_location.id,
                self.final_location_id.id,
                self.sequence_int_id.id,
            ),
            'location_src_id': quality_out_location.id,
            'location_id': self.final_location_id.id,
            'procure_method': 'make_to_order',
            'warehouse_id': self.warehouse_id.id,
            'sequence': 30,
        }
        # create rule for puffer => stock
        # in_stock_values = {
        #     'name': in_stock_name,
        #     'action': 'pull_push',
        #     'picking_type_id': self.create_picking_type(
        #         in_stock_name,
        #         'internal',
        #         False,
        #         puffer_location.id,
        #         self.final_location_id.id,
        #         self.sequence_int_id.id,
        #     ),
        #     'location_src_id': puffer_location.id,
        #     'location_id': self.final_location_id.id,
        #     'procure_method': 'make_to_order',
        #     'warehouse_id': self.warehouse_id.id,
        #     'sequence': 40,
        # }
        return [
            (0, 0, rule_receipt_values),
            (0, 0, rule_quality_values),
            (0, 0, rule_puffer_values),
            # (0, 0, in_stock_values),
        ]

    def create_picking_type(
        self,
        name,
        picking_type,
        create_lots,
        src_id,
        dest_id,
        sequence
    ):
        picking = self.env['stock.picking.type'].create({
            'name': name,
            'code': picking_type,
            'warehouse_id': self.warehouse_id.id,
            'use_create_lots': create_lots,
            'show_operations': True,
            'default_location_src_id': src_id,
            'default_location_dest_id': dest_id,
            'sequence_id': sequence,
        })
        if picking.id:
            return picking.id
        return ValidationError(_('could not create picking type'))

    def create_location(self, location_name):
        location_id = self.env['stock.location'].create({
            'name': location_name,
            'location_id': self.location_parent_create.id,
            'usage': 'internal',
        })
        if location_id.id:
            return location_id
        return ValidationError(_('could not create location'))



class StockLocationRoute(models.Model):
    _inherit = 'stock.location.route'

    softm_location_number = fields.Integer('SoftM Lagernummer')


class ProductTemplate(models.Model):
    _inherit = 'product.template'

    @api.onchange('route_ids')
    def onchange_route_ids(self):
        if self.route_ids and self.softm_location_number:
            for route_id in self.route_ids:
                if route_id.softm_location_number>0:
                    route_softm_location_number = route_id.softm_location_number
                    if self.softm_location_number != route_softm_location_number:
                        msg = "The route {route} is reserved for products with SoftM Lagernummer {route_softm_location_number} Please select different route.".format(route=route_id.name, route_softm_location_number = str(route_softm_location_number))
                        raise ValidationError(msg)


class ProductProduct(models.Model):
    _inherit = 'product.product'

    @api.onchange('route_ids')
    def onchange_route_ids(self):
        if self.route_ids and self.softm_location_number:
            for route_id in self.route_ids:
                if route_id.softm_location_number>0:
                    route_softm_location_number = route_id.softm_location_number
                    if self.softm_location_number != route_softm_location_number:
                        msg = "The route {route} is reserved for products with SoftM Lagernummer {route_softm_location_number} Please select different route.".format(route=route_id.name, route_softm_location_number = str(route_softm_location_number))
                        raise ValidationError(msg)
